*$FROM Parser/Type/SimpleTypeList
*$FROM Parser/Type/Type
*$FROM Parser/SimpleType/SimpleType
*$FROM Parser/FieldList/FieldList
$EXTERN SimpleTypeList, Type_, SimpleType, FieldList;

$ENTRY TypeAfterPacked {
    /* TypeAfterPacked -> KW_ARRAY SimpleTypeList KW_OF Type */
    () (KW_ARRAY e.A) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_ARRAY e.A)) e.Tokens t.Errs>;
    
    ((KW_ARRAY e.A)) (SimpleTypeList e.S) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_ARRAY e.A) (SimpleTypeList e.S)) e.Tokens t.Errs>;
    ((KW_ARRAY e.A)) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_ARRAY e.A)) <SimpleTypeList () e.Tokens t.Errs>>;
    
    ((KW_ARRAY e.A) t.S) (KW_OF e.O) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_ARRAY e.A) t.S (KW_OF e.O)) e.Tokens t.Errs>;
    ((KW_ARRAY e.A) t.S) (t.Type (t.Start t.End) e.Attrs) e.Tokens (e.Errs)
        = <TypeAfterPacked ((KW_ARRAY e.A) t.S)
            (KW_OF (t.Start t.Start)) (t.Type (t.Start t.End) e.Attrs)
            e.Tokens (e.Errs (t.Start TypeAfterPacked '.'
                Unexpected t.Type '.'
                Expected '[' KW_OF '].'
                Inserted '.'))>;
    ((KW_ARRAY e.A) t.S) '$' (e.Errs)
        = <TypeAfterPacked ((KW_ARRAY e.A) t.S)
            (KW_OF ((0 0) (0 0))) '$'
            (e.Errs ((EOF) TypeAfterPacked '.'
                Unexpected End Of File '.'
                Expected '[' KW_OF '].'
                Inserted '.'))>;
    
    ((KW_ARRAY e.A) t.S t.O) (Type e.T) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_ARRAY e.A) t.S t.O (Type e.T)) e.Tokens t.Errs>;
    ((KW_ARRAY e.A) t.S t.O) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_ARRAY e.A) t.S t.O) <Type_ () e.Tokens t.Errs>>;
    
    ((KW_ARRAY e.A) t.S t.O t.T) e.Tokens t.Errs
        = (TypeAfterPacked (KW_ARRAY SimpleTypeList KW_OF Type) (KW_ARRAY e.A) t.S t.O t.T) e.Tokens t.Errs;

    /* TypeAfterPacked -> KW_FILE KW_OF Type */
    () (KW_FILE e.F) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_FILE e.F) e.Tokens t.Errs)>;

    ((KW_FILE e.F)) (KW_OF e.O) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_FILE e.F) (KW_OF e.O)) e.Tokens t.Errs>;
    ((KW_FILE e.F)) (t.Type (t.Start t.End) e.Attrs) e.Tokens (e.Errs)
        = <TypeAfterPacked ((KW_FILE e.F))
            (KW_OF (t.Start t.Start)) (t.Type (t.Start t.End) e.Attrs)
            e.Tokens (e.Errs (t.Start TypeAfterPacked '.'
                Unexpected t.Type '.'
                Expected '[' KW_OF '].'
                Inserted '.'))>;
    ((KW_FILE e.F)) '$' (e.Errs)
        = <TypeAfterPacked ((KW_FILE e.F))
            (KW_OF ((0 0) (0 0))) '$'
            (e.Errs ((EOF) TypeAfterPacked '.'
                Unexpected End Of File '.'
                Expected '[' KW_OF '].'
                Inserted '.'))>;
    
    ((KW_FILE e.F) t.O) (Type e.T) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_FILE e.F) t.O (Type e.T)) e.Tokens t.Errs>;
    ((KW_FILE e.F) t.O) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_FILE e.F) t.O) <Type_ () e.Tokens t.Errs>>;
    
    ((KW_FILE e.F) t.O t.T) e.Tokens t.Errs
        = (TypeAfterPacked (KW_FILE KW_OF Type) (KW_FILE e.F) t.O t.T) e.Tokens t.Errs;
    
    /* TypeAfterPacked -> KW_SET KW_OF SimpleType */
    () (KW_SET e.S) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_SET e.S)) e.Tokens t.Errs>;

    ((KW_SET e.S)) (KW_OF e.O) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_SET e.S) (KW_OF e.O)) e.Tokens t.Errs>;
    ((KW_SET e.S)) (t.Type (t.Start t.End) e.Attrs) e.Tokens (e.Errs)
        = <TypeAfterPacked ((KW_SET e.S))
            (KW_OF (t.Start t.Start)) (t.Type (t.Start t.End) e.Attrs)
            e.Tokens (e.Errs (t.Start TypeAfterPacked '.'
                Unexpected t.Type '.'
                Expected '[' KW_OF '].'
                Inserted '.'))>;
    ((KW_SET e.S)) '$' (e.Errs)
        = <TypeAfterPacked ((KW_SET e.S))
            (KW_OF ((0 0) (0 0))) '$'
            (e.Errs ((EOF) TypeAfterPacked '.'
                Unexpected End Of File '.'
                Expected '[' KW_OF '].'
                Inserted '.'))>;
    
    ((KW_SET e.S) t.O) (SimpleType e.T) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_SET e.S) t.O (SimpleType e.T)) e.Tokens t.Errs>;
    ((KW_SET e.S) t.O) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_SET e.S) t.O) <SimpleType () e.Tokens t.Errs>>;
    
    ((KW_SET e.S) t.O t.T) e.Tokens t.Errs
        = (TypeAfterPacked (KW_SET KW_OF SimpleType) (KW_SET e.S) t.O t.T) e.Tokens t.Errs;

    /* TypeAfterPacked -> KW_RECORD FieldList KW_END */
    () (KW_RECORD e.R) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_RECORD e.R)) e.Tokens t.Errs>;
    () (t.Type (t.Start t.End) e.Attrs) e.Tokens (e.Errs)
        = <TypeAfterPacked ()
            e.Tokens (e.Errs (t.Start TypeAfterPacked '.'
                Unexpected t.Type '.'
                Expected '[' KW_ARRAY or KW_FILE or KW_SET or KW_RECORD '].'
                Skipped '.'))>;
    () '$' (e.Errs)
        = (TypeAfterPacked (EOF))
            '$'
            (e.Errs ((EOF) TypeAfterPacked '.'
                Unexpected End Of File '.'
                Expected '[' KW_ARRAY or KW_FILE or KW_SET or KW_RECORD '].'
                Terminated '.'));
    
    ((KW_RECORD e.R)) (FieldList e.F) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_RECORD e.R) (FieldList e.F)) e.Tokens t.Errs>;
    ((KW_RECORD e.R)) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_RECORD e.R)) <FieldList () e.Tokens t.Errs>>;
    
    ((KW_RECORD e.R) t.F) (KW_END e.E) e.Tokens t.Errs
        = <TypeAfterPacked ((KW_RECORD e.R) t.F (KW_END e.E)) e.Tokens t.Errs>;
    ((KW_RECORD e.R) t.F) (t.Type (t.Start t.End) e.Attrs) e.Tokens (e.Errs)
        = <TypeAfterPacked ((KW_RECORD e.R) t.F)
            (KW_END (t.Start t.Start)) (t.Type (t.Start t.End) e.Attrs)
            e.Tokens (e.Errs (t.Start TypeAfterPacked '.'
                Unexpected t.Type '.'
                Expected '[' KW_END '].'
                Inserted '.'))>;
    ((KW_RECORD e.R) t.F) '$' (e.Errs)
        = <TypeAfterPacked ((KW_RECORD e.R) t.F)
            (KW_END ((0 0) (0 0))) '$'
            (e.Errs ((EOF) TypeAfterPacked '.'
                Unexpected End Of File '.'
                Expected '[' KW_END '].'
                Inserted '.'))>;
    
    ((KW_RECORD e.R) t.F t.E) e.Tokens t.Errs
        = (TypeAfterPacked (KW_RECORD FieldList KW_END) (KW_RECORD e.R) t.F t.E) e.Tokens t.Errs;
}
