$ENTRY Parse {
    e.Tokens = <Parse-Check <Rules () e.Tokens>>;
}

Parse-Check {
    Rules '$' = Ok;
  
    s.Unexpected e.Tokens = Unexpected s.Unexpected Expected EOF;
  
    ERR e.Message = e.Message
}

Rules {
    (e.Scanned) ERR e.Message = ERR e.Message;
  
    /* Rules ::= Rule Rules */
    () Rule e.Tokens = <Rules (Rule) e.Tokens>;
    () e.Tokens = <Rules () <Rule () e.Tokens>>;
  
    (Rule) Rules e.Tokens = <Rules (Rule Rules) e.Tokens>;
    (Rule) e.Tokens = <Rules (Rule) <Rules () e.Tokens>>;
  
    (Rule Rules) e.Tokens = Rules e.Tokens;
    
    /* Rules ::= ε */
    () e.Tokens = Rules e.Tokens
}

Rule {
    (e.Scanned) ERR e.Message = ERR e.Message;

    /* Rule ::= '<' Nterm '<' Altrule '>' Altrules '>' */
    () "<" e.Tokens = <Rule ("<") e.Tokens>;
  
    ("<") (Nterm e._) e.Tokens
        = <Rule ("<" (Nterm e._)) e.Tokens>;
  
    ("<" (Nterm e._)) "<" e.Tokens
        = <Rule ("<" (Nterm e._) "<") e.Tokens>;
    
    ("<" (Nterm e._) "<") Altrule e.Tokens
        = <Rule ("<" (Nterm e._) "<" Altrule) e.Tokens>;
    ("<" (Nterm e._) "<") e.Tokens
        = <Rule ("<" (Nterm e._) "<") <Altrule () e.Tokens>>;

    ("<" (Nterm e._) "<" Altrule) ">" e.Tokens
        = <Rule ("<" (Nterm e._) "<" Altrule ">") e.Tokens>;

    ("<" (Nterm e._) "<" Altrule ">") Altrules e.Tokens
        = <Rule ("<" (Nterm e._) "<" Altrule ">" Altrules) e.Tokens>;
    ("<" (Nterm e._) "<" Altrule ">") e.Tokens
        = <Rule ("<" (Nterm e._) "<" Altrule ">") <Altrules () e.Tokens>>;

    ("<" (Nterm e._) "<" Altrule ">" Altrules) ">" e.Tokens
        = <Rule ("<" (Nterm e._) "<" Altrule ">" Altrules ">") e.Tokens>;
    
    ("<" (Nterm e._) "<" Altrule ">" Altrules ">") e.Tokens
        = Rules e.Tokens;
    
    (e.Scanned) s.Unexpected e.Tokens
        = ERR Unexpected s.Unexpected in Rule;
}

Altrules {
    (e.Scanned) ERR e.Message = ERR e.Message;

    /* Rule ::= '<' Nterm '<' Altrule '>' Altrules '>' */
    () "<" e.Tokens
        = <Rule ("<") e.Tokens>;
    
    ("<") Altrule e.Tokens
        = <Rule ("<" Altrule) e.Tokens>;
    ("<") e.Tokens
        = <Rule ("<") <Altrule () e.Tokens>>;

    ("<" Altrule) ">" e.Tokens
        = <Rule ("<" Altrule ">") e.Tokens>;

    ("<" Altrule ">") Altrules e.Tokens
        = <Rule ("<" Altrule ">" Altrules) e.Tokens>;
    ("<" Altrule ">") e.Tokens
        = <Rule ("<" Altrule ">") <Altrules () e.Tokens>>;

    ("<" Altrule ">" Altrules) e.Tokens
        = Altrules e.Tokens;

    /* Rules ::= ε */
    () e.Tokens = Altrules e.Tokens

    (e.Scanned) s.Unexpected e.Tokens
        = ERR Unexpected s.Unexpected in Rule;
}

Altrule {
    (e.Scanned) ERR e.Message = ERR e.Message;

    /* Altrule ::= Term Altrule */
    () (Term e._) e.Tokens = <Altrule ((Term e._)) e.Tokens>;
  
    ((Term e._)) Altrule e.Tokens = <Rules ((Term e._) Altrule) e.Tokens>;
    ((Term e._)) e.Tokens = <Rules ((Term e._)) <Altrule () e.Tokens>>;
  
    ((Term e._) Altrule) e.Tokens = Altrule e.Tokens;
    
    /* Altrule ::= Nterm Altrule */
    () (Nterm e._) e.Tokens = <Altrule ((Nterm e._)) e.Tokens>;
  
    ((Nterm e._)) Altrule e.Tokens = <Rules ((Nterm e._) Altrule) e.Tokens>;
    ((Nterm e._)) e.Tokens = <Rules ((Nterm e._)) <Altrule () e.Tokens>>;
  
    ((Nterm e._) Altrule) e.Tokens = Altrule e.Tokens;

    /* Altrule ::= ε */
    () e.Tokens = Altrule e.Tokens
}
