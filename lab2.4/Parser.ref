$ENTRY Parse {
    e.Tokens = <Parse-Check <Rules () e.Tokens '$'>>;
}

Parse-Check {
    t.ParseTree '$' = Ok t.ParseTree;

    ERR e.Message = ERR (e.Message);

    t.Unexpected e.Tokens = ERR Unexpected t.Unexpected Expected EOF;
}

/*
    <Rules (e.Scanned) t.Token*> ==
          t.TreeNode t.Token*
        | ERR e.Message
    t.TreeNode ::= (s.Nterm (s.Token*) t.TreeNode*)
*/
Rules {
    (e.Scanned) ERR e.Message = ERR e.Message;

    /* Rules ::= Rule Rules */
    () (Rule e.R) e.Tokens = <Rules ((Rule e.R)) e.Tokens>;
    () ('<' e.OB) e.Tokens = <Rules () <Rule () ('<' e.OB) e.Tokens>>;

    ((Rule e.R)) (Rules e.Rs) e.Tokens
        = <Rules ((Rule e.R) (Rules e.Rs)) e.Tokens>;
    ((Rule e.R)) e.Tokens
        = <Rules ((Rule e.R)) <Rules () e.Tokens>>;

    (t.Rule (Rules e.Rs)) e.Tokens
        = (Rules (Rule Rules) t.Rule (Rules e.Rs)) e.Tokens;

    /* Rules ::= ε */
    () e.Tokens = (Rules ()) e.Tokens;
}

Rule {
    (e.Scanned) ERR e.Message = ERR e.Message;

    /* Rule ::= '<' Nterm '<' Altrule '>' Altrules '>' */
    () ('<' e.OB) e.Tokens = <Rule (('<' e.OB)) e.Tokens>;

    (('<' e.OB)) (Nterm e.N) e.Tokens
        = <Rule (('<' e.OB) (Nterm e.N)) e.Tokens>;

    (('<' e.OB1) t.Nterm) ('<' e.OB2) e.Tokens
        = <Rule (('<' e.OB1) t.Nterm ('<' e.OB2)) e.Tokens>;

    (e.Pref ('<' e.OB)) (Altrule e.A) e.Tokens
        = <Rule (e.Pref ('<' e.OB) (Altrule e.A)) e.Tokens>;
    (e.Pref ('<' e.OB)) e.Tokens
        = <Rule (e.Pref ('<' e.OB)) <Altrule () e.Tokens>>;

    (e.Pref (Altrule e.A)) ('>' e.CB) e.Tokens
        = <Rule (e.Pref (Altrule e.A) ('>' e.CB)) e.Tokens>;

    (e.Pref (Altrule e.A) ('>' e.CB)) (Altrules e.As) e.Tokens
        = <Rule (e.Pref (Altrule e.A) ('>' e.CB) (Altrules e.As)) e.Tokens>;
    (e.Pref (Altrule e.A) ('>' e.CB)) e.Tokens
        = <Rule (e.Pref (Altrule e.A) ('>' e.CB)) <Altrules () e.Tokens>>;

    (e.Pref (Altrules e.A)) ('>' e.CB) e.Tokens
        = <Rule (e.Pref (Altrules e.A) ('>' e.CB)) e.Tokens>;

    (e.Pref ('>' e.CB)) e.Tokens
        = (Rule ('<' Nterm '<' Altrule '>' Altrules '>')
            e.Pref ('>' e.CB)) e.Tokens;

    (e.Scanned) t.Unexpected e.Tokens
        = ERR Unexpected t.Unexpected in Rule;
}

Altrules {
    (e.Scanned) ERR e.Message = ERR e.Message;

    /* Altrules ::= '<' Altrule '>' Altrules */
    () ('<' e.OB) e.Tokens = <Altrules (('<' e.OB)) e.Tokens>;

    (('<' e.OB)) (Altrule e.A) e.Tokens = <Altrules (('<' e.OB) (Altrule e.A)) e.Tokens>;
    (('<' e.OB)) e.Tokens = <Altrules (('<' e.OB)) <Altrule () e.Tokens>>;

    (e.Pref (Altrule e.A)) ('>' e.CB) e.Tokens
        = <Altrules (e.Pref (Altrule e.A) ('>' e.CB)) e.Tokens>;

    (e.Pref ('>' e.CB)) (Altrules e.As) e.Tokens
        = <Altrules (e.Pref ('>' e.CB) (Altrules e.As)) e.Tokens>;
    (e.Pref ('>' e.CB)) e.Tokens
        = <Altrules (e.Pref ('>' e.CB)) <Altrules () e.Tokens>>;

    (e.Pref (Altrules e.As)) e.Tokens
        = (Altrules ('<' Altrule '>' Altrules) e.Pref (Altrules e.As)) e.Tokens;

    /* Rules ::= ε */
    () e.Tokens = (Altrules ()) e.Tokens;

    (e.Scanned) t.Unexpected e.Tokens
        = ERR Unexpected t.Unexpected in Altrules;
}

Altrule {
    (e.Scanned) ERR e.Message = ERR e.Message;

    /* Altrule ::= Term Altrule */
    () (Term e.T) e.Tokens = <Altrule ((Term e.T)) e.Tokens>;

    ((Term e.T)) (Altrule e.A) e.Tokens
        = <Altrule ((Term e.T) (Altrule e.A)) e.Tokens>;
    ((Term e.T)) e.Tokens
        = <Altrule ((Term e.T)) <Altrule () e.Tokens>>;

    ((Term e.T) t.A) e.Tokens
        = (Altrule (Term Altrule) (Term e.T) t.A) e.Tokens;

    /* Altrule ::= Nterm Altrule */
    () (Nterm e.N) e.Tokens = <Altrule ((Nterm e.N)) e.Tokens>;

    ((Nterm e.N)) (Altrule e.A) e.Tokens
        = <Altrule ((Nterm e.N) (Altrule e.A)) e.Tokens>;
    ((Nterm e.N)) e.Tokens
        = <Altrule ((Nterm e.N)) <Altrule () e.Tokens>>;

    ((Nterm e.N) t.A) e.Tokens
        = (Altrule (Nterm Altrule) (Nterm e.N) t.A) e.Tokens;

    /* Altrule ::= ε */
    () e.Tokens = (Altrule ()) e.Tokens;
}
